/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    messages: Message;
    notifications: Notification;
    revenue: Revenue;
    transactions: Transaction;
    doctors: Doctor;
    metrics: Metric;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    messages: MessagesSelect<false> | MessagesSelect<true>;
    notifications: NotificationsSelect<false> | NotificationsSelect<true>;
    revenue: RevenueSelect<false> | RevenueSelect<true>;
    transactions: TransactionsSelect<false> | TransactionsSelect<true>;
    doctors: DoctorsSelect<false> | DoctorsSelect<true>;
    metrics: MetricsSelect<false> | MetricsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role: 'admin' | 'doctor' | 'vendor' | 'rider' | 'client';
  /**
   * Upload a profile picture for the user.
   */
  profilePicture?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * Upload and manage media files.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messages".
 */
export interface Message {
  id: string;
  user_name: string;
  user_abbreviation: string;
  user_abbreviation_color: {
    primary: string;
    accent: string;
  };
  message: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  time: string;
  number_of_messages?: number | null;
  online?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications".
 */
export interface Notification {
  id: string;
  title: 'rider' | 'driver' | 'support_ticket' | 'telemedicine' | 'other';
  message: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  time: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "revenue".
 */
export interface Revenue {
  id: string;
  /**
   * The date for which this revenue data applies.
   */
  date: string;
  /**
   * Total revenue generated (e.g., in USD).
   */
  totalRevenue: number;
  /**
   * The total number of app sessions or usage count.
   */
  totalAppUsage: number;
  /**
   * Total consultations completed.
   */
  totalConsultations: number;
  /**
   * Total funding received (e.g., in USD).
   */
  totalFunding: number;
  /**
   * Total payouts made (e.g., in USD).
   */
  totalPayout: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions".
 */
export interface Transaction {
  id: string;
  status: 'completed' | 'pending' | 'canceled';
  /**
   * Payment method description (e.g., Visa card ****4831).
   */
  paymentMethod: string;
  /**
   * Transaction amount in USD.
   */
  amount: number;
  /**
   * The category of the transaction (e.g., Consultation, Ecommerce).
   */
  category: 'consultation' | 'ecommerce' | 'subscription' | 'donation' | 'refund' | 'dr_withdrawal' | 'other';
  /**
   * Type of payment (e.g., Card payment, Bank payment).
   */
  paymentType: 'card_payment' | 'bank_payment' | 'wallet_payment' | 'other';
  date: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "doctors".
 */
export interface Doctor {
  id: string;
  name: string;
  /**
   * Total consultations handled by the doctor.
   */
  consultations: number;
  /**
   * Doctorâ€™s specialization (e.g., Generalist, Specialist).
   */
  specialization:
    | 'generalist'
    | 'specialist'
    | 'surgeon'
    | 'therapist'
    | 'psychologist'
    | 'dentist'
    | 'veterinarian'
    | 'other';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "metrics".
 */
export interface Metric {
  id: string;
  /**
   * The title of the metric (e.g., Total Rider, Total Doctor).
   */
  title: 'Total Rider' | 'Total Doctor' | 'Total Vendor' | 'Total Client' | 'Total Ambulance';
  /**
   * The total number for this metric (e.g., 12,426).
   */
  total: number;
  /**
   * The percentage change for this metric (e.g., +36%).
   */
  change?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'messages';
        value: string | Message;
      } | null)
    | ({
        relationTo: 'notifications';
        value: string | Notification;
      } | null)
    | ({
        relationTo: 'revenue';
        value: string | Revenue;
      } | null)
    | ({
        relationTo: 'transactions';
        value: string | Transaction;
      } | null)
    | ({
        relationTo: 'doctors';
        value: string | Doctor;
      } | null)
    | ({
        relationTo: 'metrics';
        value: string | Metric;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  profilePicture?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messages_select".
 */
export interface MessagesSelect<T extends boolean = true> {
  user_name?: T;
  user_abbreviation?: T;
  user_abbreviation_color?:
    | T
    | {
        primary?: T;
        accent?: T;
      };
  message?: T;
  time?: T;
  number_of_messages?: T;
  online?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications_select".
 */
export interface NotificationsSelect<T extends boolean = true> {
  title?: T;
  message?: T;
  time?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "revenue_select".
 */
export interface RevenueSelect<T extends boolean = true> {
  date?: T;
  totalRevenue?: T;
  totalAppUsage?: T;
  totalConsultations?: T;
  totalFunding?: T;
  totalPayout?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions_select".
 */
export interface TransactionsSelect<T extends boolean = true> {
  status?: T;
  paymentMethod?: T;
  amount?: T;
  category?: T;
  paymentType?: T;
  date?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "doctors_select".
 */
export interface DoctorsSelect<T extends boolean = true> {
  name?: T;
  consultations?: T;
  specialization?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "metrics_select".
 */
export interface MetricsSelect<T extends boolean = true> {
  title?: T;
  total?: T;
  change?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}